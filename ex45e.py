"""
Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""


class TriPentHex():
    def __init__(self, lower_limit):
        self.lower_limit = lower_limit
        self.triangle = 0
        self.pentagonal = 0
        self.hexagonal = 0

    def find_next_match(self):
        self.set_generators()
        self.set_initial_triangle()
        self.match_numbers()
        return self.get_answer()

    def set_generators(self):
        self.triangle_gen = self.triangular_numbers_gen()
        self.pentagonal_gen = self.pentagonal_numbers_gen()
        self.hexagonal_gen = self.hexagonal_numbers_gen()

    def triangular_numbers_gen(self):
        n = 1
        while True:
            yield int(n * (n + 1) / 2)
            n += 1

    def pentagonal_numbers_gen(self):
        n = 1
        while True:
            yield int(n * (3 * n - 1) / 2)
            n += 1

    def hexagonal_numbers_gen(self):
        n = 1
        while True:
            yield int(n * (2 * n - 1))
            n += 1

    def set_initial_triangle(self):
        while self.triangle < self.lower_limit:
            self.triangle = next(self.triangle_gen)
        print("Initial Triangle:", self.triangle)

    def match_numbers(self):
        while not ((self.triangle == self.pentagonal)
                   & (self.triangle == self.hexagonal)):
            while self.pentagonal < self.triangle:
                self.pentagonal = next(self.pentagonal_gen)
            print("Pentagonal:", self.pentagonal, ". Triangle:", self.triangle)
            if self.pentagonal == self.triangle:
                while self.hexagonal < self.triangle:
                    self.hexagonal = next(self.hexagonal_gen)
                print("Hexagonal:", self.hexagonal,
                      ". Triangle:", self.triangle)
                if self.hexagonal == self.triangle:
                    self.answer = self.triangle
                else:
                    while self.triangle < self.hexagonal:
                        self.triangle = next(self.triangle_gen)
                    print("New Triangle:", self.triangle)
            else:
                while self.triangle < self.pentagonal:
                    self.triangle = next(self.triangle_gen)
                print("New Triangle:", self.triangle)
            print("Triangle:", self.triangle)
            print("Pentagonal:", self.pentagonal)
            print("Hexagonal:", self.hexagonal, "\n")

    def get_answer(self):
        return self.answer


# CPU times: user 28 s, sys: 7.7 s, total: 35.7 s
# Wall time: 27.6 s
# 1533776805
